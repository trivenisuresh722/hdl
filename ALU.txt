module Alu(
    input [3:0] A,
    input [3:0] B,
    input [3:0] ALU_sel,
    output [3:0] ALU_out,
    output Carry_out
    );
    reg [3:0] ALU_result;
    wire [4:0] tmp;
    
    assign ALU_out=ALU_result;
    assign tmp={1'b0,A}+{1'b0,B};
    assign Carry_out=tmp[4];
    
    always @(*)
    begin
        case(ALU_sel)
        4'b0000:ALU_result=A+B;
        4'b0001:ALU_result=A-B;
        4'b0010:ALU_result=A*B;
        4'b0011:ALU_result=A/B;
        4'b0100:ALU_result=A<<1;
        4'b0101:ALU_result=A>>B;
        4'b0110:ALU_result={A[2:0],A[3]};
        4'b0111:ALU_result={A[0],A[3:1]};
        4'b1000:ALU_result=A&B;
        4'b1001:ALU_result=A|B;
        4'b1010:ALU_result=A^B;
        4'b1101:ALU_result=~(A&B);
        4'b0011:ALU_result=~(A|B);
        4'b1011:ALU_result=~(A^B);
        4'b1110:ALU_result=(A>B)?4'b1:4'b0;
        4'b0001:ALU_result=(A==B)?4'b1:4'b0;
        default: ALU_result = A + B ; 
        endcase
    end



-------

module tb;
    reg [3:0] A;
    reg [3:0] B;
    reg [3:0] ALU_sel;
    wire [3:0] ALU_out;
    wire Carry_out;
    integer i;
    Alu uut(
            .A(A),
            .B(B),
            .ALU_sel(ALU_sel),
            .ALU_out(ALU_out),
            .Carry_out(Carry_out)
            );
            
    initial begin
        A=4'hA;
        B=4'h9;
        ALU_sel=4'h0;
        #25
        for(i=0;i<=15;i=i+1)
        begin
           ALU_sel=ALU_sel+4'h1;
           #25; 
        end
        A=4'h6;
        B=4'h1;
        
    end
    
endmodule
